//! Request and user related resources gathered in one place for convenience.

use rocket::{
    request::{FromRequest, Outcome},
    Request,
};

use crate::content_security_policy::Nonce;

/// Various resources needed for rendering a page gather in one place for convenience.
#[derive(Clone)]
pub struct Context {
    /// The cryptographic nonce generated by the [`ContentSecurityPolicy`](`crate::content_security_policy::ContentSecurityPolicy`) fairing for the request.
    /// To be added to all the resources on the page (e.g. style and script tags).
    pub nonce: Nonce,
}

#[rocket::async_trait]
impl<'r> FromRequest<'r> for Context {
    type Error = ();

    async fn from_request(request: &'r Request<'_>) -> Outcome<Self, Self::Error> {
        Outcome::Success(Context {
            // The closure won't be executed since ContentSecurityPolicy::on_request is guaranteed to have executed by this point.
            nonce: request.local_cache::<Nonce, _>(|| unreachable!()).clone(),
        })
    }
}
